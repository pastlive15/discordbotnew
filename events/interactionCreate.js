// events/interactionCreate.js
// Central interaction handler (slash-commands + Big Heist button)
// Description (EN):
// - Runs slash commands with robust error handling
// - Handles a "Big Vault Heist" button with concurrency safety
// - Uses ephemeral flags for user-facing errors
//
// #‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏±‡∏ö interaction ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// #‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° Big Heist ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ã‡πâ‡∏≥/‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Set + DB row lock

const { Events, EmbedBuilder, MessageFlags } = require('discord.js');
const { initUser } = require('../utils/initUser');
const { isBigHeistActive } = require('./messageCreate'); // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡∏ö‡∏ô "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô" ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Big Heist
// ‡πÉ‡∏ä‡πâ message.id ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏∏‡∏ç‡πÅ‡∏à ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏Å‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏≠‡∏û
const claimedHeistByMessage = new Set();

/**
 * Run a command and catch errors uniformly.
 * #‡πÑ‡∏ó‡∏¢: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ try/catch ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ error
 */
async function runCommandSafe(interaction, db, bot) {
  const name = interaction.commandName;
  const command = bot?.commands?.get(name);
  if (!command) {
    console.warn(`‚ö†Ô∏è Unknown command: /${name}`);
    return interaction.reply({ content: '‚ö†Ô∏è Unknown command.', flags: MessageFlags.Ephemeral }).catch(() => {});
  }

  try {
    await command.execute(interaction, db);
  } catch (err) {
    console.error(`‚ùå Error executing /${name}:`, err);
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö)
    if (!interaction.deferred && !interaction.replied) {
      await interaction.reply({
        content: '‚ö†Ô∏è Something went wrong while executing that command.',
        flags: MessageFlags.Ephemeral,
      }).catch(() => {});
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á follow-up
      await interaction.followUp({
        content: '‚ö†Ô∏è Something went wrong while executing that command.',
        flags: MessageFlags.Ephemeral,
      }).catch(() => {});
    }
  }
}

module.exports = {
  name: Events.InteractionCreate,

  /**
   * @param {import('discord.js').Interaction} interaction
   * @param {import('discord.js').Client} bot
   * @param {import('pg').Pool} db
   */
  async execute(interaction, bot, db) {
    try {
      // --- Slash commands ---
      if (interaction.isChatInputCommand()) {
        // #‡πÑ‡∏ó‡∏¢: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        return await runCommandSafe(interaction, db, bot);
      }

      // --- Big Vault Heist Button ---
      if (interaction.isButton() && interaction.customId === 'vaultrob_bigheist') {
        // #‡πÑ‡∏ó‡∏¢: ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ event ‡∏¢‡∏±‡∏á active ‡πÑ‡∏´‡∏°
        if (!isBigHeistActive?.()) {
          return interaction.reply({ content: '‚ùå This Big Heist has expired.', flags: MessageFlags.Ephemeral });
        }

        // #‡πÑ‡∏ó‡∏¢: ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏≠‡∏û
        const msgId = interaction.message?.id;
        if (!msgId) {
          return interaction.reply({ content: '‚ö†Ô∏è Invalid heist message.', flags: MessageFlags.Ephemeral });
        }
        if (claimedHeistByMessage.has(msgId)) {
          return interaction.reply({ content: '‚ö†Ô∏è Someone already claimed this Big Vault Heist!', flags: MessageFlags.Ephemeral });
        }

        // #‡πÑ‡∏ó‡∏¢: ‡∏ï‡∏±‡πâ‡∏á‡∏ò‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô (optimistic) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô DB ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
        claimedHeistByMessage.add(msgId);

        // #‡πÑ‡∏ó‡∏¢: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô + row lock ‡∏ó‡∏µ‡πà BOT_BANK ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏° process/shard
        const VAULT_ID = 'BOT_BANK';
        const user = await initUser(interaction.user); // ‡∏™‡∏£‡πâ‡∏≤‡∏á row ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        await initUser({ id: VAULT_ID, username: 'Bot Vault' });

        try {
          await db.query('BEGIN');

          // Lock vault row
          const { rows: vaultRows } = await db.query(
            `SELECT user_id, money FROM users WHERE user_id = $1 FOR UPDATE`,
            [VAULT_ID]
          );
          const vault = vaultRows[0];
          const vaultAmount = Number(vault?.money || 0);

          if (!isBigHeistActive?.()) {
            await db.query('ROLLBACK');
            return interaction.reply({ content: '‚ùå This Big Heist has expired.', flags: MessageFlags.Ephemeral });
          }

          if (vaultAmount < 10_000) {
            await db.query('ROLLBACK');
            return interaction.reply({ content: 'üè¶ The vault is nearly empty ‚Äî nothing worth stealing!', flags: MessageFlags.Ephemeral });
          }

          // #‡πÑ‡∏ó‡∏¢: 20% - 30% ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
          const stealPercent = 0.20 + Math.random() * 0.10;
          const rawStolen = Math.floor(vaultAmount * stealPercent);

          // ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î
          const stolenAmount = Math.max(1, Math.min(rawStolen, vaultAmount));

          // Update user (no lock user row; balance update is idempotent here)
          await db.query(`UPDATE users SET money = money + $1 WHERE user_id = $2`, [stolenAmount, interaction.user.id]);
          // Update vault
          await db.query(`UPDATE users SET money = money - $1 WHERE user_id = $2`, [stolenAmount, VAULT_ID]);

          await db.query('COMMIT');

          // #‡πÑ‡∏ó‡∏¢: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
          const embed = new EmbedBuilder()
            .setTitle('üí• Big Vault Heist Success!')
            .setColor(0xF59E0B)
            .setDescription(
              `**${interaction.user.username}** pulled off the **Big Vault Heist**!\n\n` +
              `üí∞ Stolen: **${stolenAmount.toLocaleString()} coins**\n` +
              `üìà Multiplier: **${(stealPercent * 100).toFixed(2)}%**`
            )
            .setTimestamp();

          // update() ‡∏à‡∏∞ edit ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ reply ‡πÉ‡∏´‡∏°‡πà)
          return interaction.update({ embeds: [embed], components: [] });
        } catch (err) {
          console.error('‚ùå Big Heist tx error:', err);
          try { await db.query('ROLLBACK'); } catch {}
          // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ò‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á
          claimedHeistByMessage.delete(msgId);
          return interaction.reply({ content: '‚ö†Ô∏è Heist failed due to an internal error. Try again.', flags: MessageFlags.Ephemeral });
        }
      }
    } catch (outerErr) {
      console.error('‚ùå Interaction handler error:', outerErr);
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({ content: '‚ö†Ô∏è Unexpected error.', flags: MessageFlags.Ephemeral }).catch(() => {});
      }
    }
  },
};
