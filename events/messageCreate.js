// events/messageCreate.js
// Message handler (Big Heist trigger + balanced, truly-random XP system)
//
// ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î XP ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
// - ‡∏ï‡∏±‡πâ‡∏á "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏•‡πÄ‡∏ß‡∏•" (MESSAGES_PER_LEVEL) ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì XP ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å xpToNext(level) / MESSAGES_PER_LEVEL
// - ‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏° (jitter) ‡πÅ‡∏•‡∏∞ lucky bonus ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ô‡∏¥‡πà‡∏á
// - ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥/‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î "‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å" ‡∏ï‡∏≤‡∏° xpToNext ‚Äî ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 200/500 ‡∏≠‡∏µ‡∏Å
// - ‡∏°‡∏µ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ XP ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 20s ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°)
//
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡πà‡∏á db ‡πÉ‡∏´‡πâ initUser ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì

const {
  Events,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require('discord.js');
const { xpToNext } = require('../utils/levelUtils');
const { initUser } = require('../utils/initUser');

// ---------- Heist config/state ----------
const HEIST_COOLDOWN_MS = 2 * 60 * 60 * 1000; // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
const HEIST_CHANCE_PER_MESSAGE = 0.015;       // 1.5% ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
const HEIST_DURATION_MS = 5 * 60 * 1000;      // ‡πÄ‡∏õ‡∏¥‡∏î 5 ‡∏ô‡∏≤‡∏ó‡∏µ

let lastHeistSpawnAt = 0;
let heistActive = false;
let heistTimer = null;

// ---------- XP config/state ----------
const XP_COOLDOWN_MS = 1_000;          // 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ XP
const MESSAGES_PER_LEVEL = 360;         // ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ~360 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° / ‡πÄ‡∏•‡πÄ‡∏ß‡∏• (~2 ‡∏ä‡∏°. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ)
const FASTEST_PORTION = 0.20;           // ‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î ~20% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÄ‡∏•‡πÄ‡∏ß‡∏•
const JITTER_PCT = 0.20;                // ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏Å‡∏ß‡πà‡∏á ¬±20%

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥/‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î "‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å" (‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö need ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ô‡∏±‡πâ‡∏ô)
const MIN_FLOOR_ABS = 5;                // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 5
const MIN_FLOOR_NEED_RATIO = 1 / 1200;  // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ~0.083% ‡∏Ç‡∏≠‡∏á need
const MAX_CEIL_MIN_MSGS = 30;           // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
// dynamicMax ‚âà need / max(30, MESSAGES_PER_LEVEL*FASTEST_PORTION)

// lucky bonus (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
const LUCKY_SMALL_CHANCE = 0.05;        // 5% ‡πÇ‡∏ä‡∏Ñ‡πÄ‡∏•‡πá‡∏Å
const LUCKY_SMALL_BONUS  = 0.03;        // +3% ‡∏Ç‡∏≠‡∏á perMsgTarget
const LUCKY_BIG_CHANCE   = 0.01;        // 1% ‡πÇ‡∏ä‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á
const LUCKY_BIG_BONUS    = 0.07;        // +7% ‡∏Ç‡∏≠‡∏á perMsgTarget

// ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà cooldown ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const lastXpAt = new Map();

// ---------- Heist helper ----------
async function maybeTriggerHeist(message) {
  const now = Date.now();
  if (heistActive) return;
  if (now - lastHeistSpawnAt < HEIST_COOLDOWN_MS) return;
  if (Math.random() >= HEIST_CHANCE_PER_MESSAGE) return;

  heistActive = true;
  lastHeistSpawnAt = now;

  const embed = new EmbedBuilder()
    .setTitle('üí• Big Vault Heist Activated!')
    .setColor(0x991b1b)
    .setDescription(
      'üö® For the next **5 minutes**, one lucky thief can attempt a **Big Vault Robbery**!\n\n' +
      'üí∞ Reward: **Up to 30%** of the vault\n' +
      'üìà Success Rate: **TRIPLE normal**\n\n' +
      '‚ö†Ô∏è Only **one** person can claim the heist!\n' +
      'Click the button below to try your luck!'
    )
    .setFooter({ text: 'This offer disappears in 5 minutes.' })
    .setTimestamp();

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('vaultrob_bigheist')
      .setLabel('üí£ Rob the Vault')
      .setStyle(ButtonStyle.Danger)
  );

  try {
    await message.channel.send({ embeds: [embed], components: [row] });
  } catch (e) {
    console.warn('Failed to send Big Heist message:', e?.message || e);
    heistActive = false;
    return;
  }

  clearTimeout(heistTimer);
  heistTimer = setTimeout(() => {
    heistActive = false;
    heistTimer = null;
  }, HEIST_DURATION_MS);
}

// ---------- XP helper ----------
// ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏•‡∏≤‡∏á ‡πÜ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤ uniform ¬±‡∏Ç‡∏≠‡∏ö)
function randTriangular(mean, amplitudePct) {
  // ‡∏ä‡πà‡∏ß‡∏á = mean * amplitudePct
  const amp = Math.max(0, Number(amplitudePct || 0)) * mean;
  if (amp <= 0) return Math.round(mean);
  // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ distribution ‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  const a = mean - amp;
  const b = mean + amp;
  const r1 = a + Math.random() * (b - a);
  const r2 = a + Math.random() * (b - a);
  return Math.round((r1 + r2) / 2);
}

function computeMessageXP(userRow) {
  const lvl = Math.max(1, Number(userRow?.level || 1));
  const need = Math.max(1, xpToNext(lvl)); // XP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÑ‡∏õ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

  // ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ XP ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)
  const perMsgTarget = Math.max(1, Math.floor(need / MESSAGES_PER_LEVEL));

  // ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö triangular ‡∏£‡∏≠‡∏ö ‡πÜ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏î‡∏π‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Å‡∏ß‡πà‡∏≤ uniform)
  let gain = randTriangular(perMsgTarget, JITTER_PCT);

  // Lucky bonus (‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡∏Ñ‡∏∏‡∏°‡∏Å‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ dynamic max ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
  if (Math.random() < LUCKY_SMALL_CHANCE) {
    gain += Math.round(perMsgTarget * LUCKY_SMALL_BONUS);
  }
  if (Math.random() < LUCKY_BIG_CHANCE) {
    gain += Math.round(perMsgTarget * LUCKY_BIG_BONUS);
  }

  // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡πà‡∏ô xpmult)
  const xpMult = Math.max(0, Number(userRow?.xp_multiplier ?? 1.0));
  gain = Math.round(gain * xpMult);

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å: ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ MIN_FLOOR_ABS ‡∏´‡∏£‡∏∑‡∏≠ ~0.083% ‡∏Ç‡∏≠‡∏á need
  const minDynamic = Math.max(MIN_FLOOR_ABS, Math.floor(need * MIN_FLOOR_NEED_RATIO));

  // ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å: ‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î ~20% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÄ‡∏•‡πÄ‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const fastestMsgs = Math.max(MAX_CEIL_MIN_MSGS, Math.floor(MESSAGES_PER_LEVEL * FASTEST_PORTION));
  const maxDynamic = Math.max(minDynamic + 1, Math.ceil(need / fastestMsgs));

  // ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ clamp ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
  gain = Math.max(minDynamic, Math.min(maxDynamic, gain));

  return gain;
}

async function grantMessageXP(message, db) {
  const uid = message.author.id;
  const now = Date.now();

  // Anti-spam cooldown
  const last = lastXpAt.get(uid) || 0;
  if (now - last < XP_COOLDOWN_MS) return;
  lastXpAt.set(uid, now);

  // Ensure row exists (initUser ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏£‡∏±‡∏ö db)
  const user = await initUser(message.author, db);

  const gained = computeMessageXP(user);
  let xp = Math.max(0, Number(user.xp || 0)) + gained;
  let lvl = Math.max(1, Number(user.level || 1));

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏•‡πÄ‡∏ß‡∏•
  let levelsGained = 0;
  for (;;) {
    const needed = xpToNext(lvl);
    if (xp < needed) break;
    xp -= needed;
    lvl += 1;
    levelsGained += 1;
  }

  try {
    await db.query('UPDATE users SET xp = $1, level = $2 WHERE user_id = $3', [xp, lvl, uid]);
  } catch (e) {
    console.error('Failed to update XP:', e);
    return;
  }

  if (levelsGained > 0) {
    const embed = new EmbedBuilder()
      .setTitle('üåü Level Up!')
      .setDescription(`**${message.author.username}** reached **level ${lvl}** üéâ\n(+${gained} XP)`)
      .setColor(0x22c55e)
      .setThumbnail(message.author.displayAvatarURL({ forceStatic: false }))
      .setFooter({ text: `Levels gained this message: ${levelsGained}` })
      .setTimestamp();
    try { await message.channel.send({ embeds: [embed] }); } catch {}
  }
}

let exportedActiveGetter = () => heistActive;

module.exports = {
  name: Events.MessageCreate,

  /**
   * @param {import('discord.js').Message} message
   * @param {import('discord.js').Client} bot
   * @param {import('pg').Pool} db
   */
  async execute(message, bot, db) {
    try {
      if (message.author.bot) return;
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ XP ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á:
      // if (!message.guild) return;

      await maybeTriggerHeist(message);
      await grantMessageXP(message, db);
    } catch (err) {
      console.error('messageCreate error:', err);
    }
  },

  // ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ
  isBigHeistActive: () => exportedActiveGetter(),
};
