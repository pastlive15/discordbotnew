// commands/steal.js
// Refactored Steal Command (atomic, item-aware)
// Description (EN): Attempt to steal coins from another user (base 30% success).
// Uses a single DB transaction with SELECT ... FOR UPDATE to avoid race conditions.
// Item effects:
//   - Gloves: +5% success chance (max 1), not consumed
//   - Silent Boots: halves fine on failure (max 1), not consumed
// Cooldown: 7 minutes. On failure, a small portion compensates the victim and the rest goes to the tax vault.
//
// #‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î

const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const { initUser } = require('../utils/initUser');
const { depositTax } = require('../utils/taxUtils');

const COOLDOWN_MS   = 7 * 60 * 1000; // 7 ‡∏ô‡∏≤‡∏ó‡∏µ
const BASE_SUCCESS  = 0.30;          // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
const GLOVES_BONUS  = 0.05;          // Gloves ‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ +5%
const MAX_STEAL_PCT = 0.70;          // ‡∏Ç‡∏≠‡∏õ‡∏•‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 70% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏•‡πâ‡∏ô")
const FINE_BRACKETS = [
  { chance: 0.50, percent: 0.055 },
  { chance: 0.30, percent: 0.10  },
  { chance: 0.15, percent: 0.15  },
  { chance: 0.05, percent: 0.20  },
];

const COLORS = {
  GREEN: 0x22c55e,
  RED:   0xef4444,
  ORANGE:0xf59e0b,
};

function fmt(n) {
  return new Intl.NumberFormat().format(Number(n || 0));
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° weight
function pickFinePercent() {
  const r = Math.random();
  let acc = 0;
  for (const f of FINE_BRACKETS) {
    acc += f.chance;
    if (r < acc) return f.percent;
  }
  return FINE_BRACKETS[FINE_BRACKETS.length - 1].percent;
}

module.exports = {
  name: 'steal',
  description: 'Try to steal coins from another user (base 30% success chance)',
  data: new SlashCommandBuilder()
    .setName('steal')
    .setDescription('Attempt to steal coins from another user')
    .addUserOption(option =>
      option.setName('target')
        .setDescription('User you want to steal from')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('amount')
        .setDescription('Amount of coins to attempt stealing')
        .setRequired(true)),

  // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö execute(interaction, db) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  async execute(interaction, db) {
    const thiefUser  = interaction.user;
    const thiefId    = thiefUser.id;
    const targetUser = interaction.options.getUser('target');
    const targetId   = targetUser?.id;
    let requested    = interaction.options.getInteger('amount') || 0;
    const now        = Date.now();

    // Guard ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!targetId || targetUser.bot) {
      return interaction.reply({ content: '‚ùå Invalid target (cannot steal from bots).', flags: MessageFlags.Ephemeral });
    }
    if (thiefId === targetId) {
      return interaction.reply({ content: '‚ùå You cannot steal from yourself.', flags: MessageFlags.Ephemeral });
    }
    if (requested <= 0) {
      return interaction.reply({ content: '‚ùå Amount must be greater than 0.', flags: MessageFlags.Ephemeral });
    }

    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ row ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà (‡∏™‡πà‡∏á db ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
    await initUser(thiefUser, db);
    await initUser(targetUser, db);

    let result;

    // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô
    await db.query('BEGIN');
    try {
      // ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á 2 ‡πÅ‡∏ñ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ FOR UPDATE (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° user_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô deadlock)
      const firstId  = thiefId < targetId ? thiefId : targetId;
      const secondId = thiefId < targetId ? targetId : thiefId;

      const { rows: r1 } = await db.query(
        `SELECT user_id, money, last_steal, items FROM users WHERE user_id = $1 FOR UPDATE`,
        [firstId]
      );
      const { rows: r2 } = await db.query(
        `SELECT user_id, money, last_steal, items FROM users WHERE user_id = $1 FOR UPDATE`,
        [secondId]
      );

      const rowA = r1[0];
      const rowB = r2[0];

      // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ù‡∏±‡πà‡∏á
      const thief  = (rowA.user_id === thiefId) ? rowA : rowB;
      const victim = (rowA.user_id === targetId) ? rowA : rowB;

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå
      const last = Number(thief.last_steal || 0);
      if (last && now - last < COOLDOWN_MS) {
        const next = last + COOLDOWN_MS;
        await db.query('ROLLBACK');
        const embed = new EmbedBuilder()
          .setTitle('‚è≥ Cooldown Active')
          .setColor(COLORS.ORANGE)
          .setDescription(`Try again <t:${Math.floor(next / 1000)}:R>.`)
          .setTimestamp();
        return interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
      }

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏° % ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠
      const victimMoney = Number(victim.money || 0);
      const maxAllowed  = Math.floor(victimMoney * MAX_STEAL_PCT);
      const amount      = Math.max(0, Math.min(requested, maxAllowed));

      if (amount <= 0 || victimMoney <= 0) {
        await db.query('ROLLBACK');
        return interaction.reply({
          content: `‚ùå ${targetUser.username} doesn't have enough coins to be stolen from right now.`,
          flags: MessageFlags.Ephemeral,
        });
      }

      // ‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° (‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å consume)
      const gloves = Math.min(1, Number((thief.items?.gloves) || 0));
      const boots  = Math.min(1, Number((thief.items?.boots)  || 0));

      const successChance = Math.min(0.95, BASE_SUCCESS + gloves * GLOVES_BONUS);
      const success = Math.random() < successChance;

      if (success) {
        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠ ‚Üí ‡πÇ‡∏à‡∏£ + ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå
        const taken = Math.min(amount, victimMoney);

        await db.query(
          `UPDATE users
           SET money = money + $1, last_steal = $3
           WHERE user_id = $2`,
          [taken, thiefId, now]
        );
        await db.query(
          `UPDATE users
           SET money = GREATEST(money - $1, 0)
           WHERE user_id = $2`,
          [taken, targetId]
        );

        result = { type: 'success', taken };
      } else {
        // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏•‡πâ‡∏ô" ‡πÅ‡∏•‡∏∞ Boots ‡∏•‡∏î 50% (‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å consume)
        const finePct = pickFinePercent();
        let fine = Math.floor(amount * finePct);
        if (boots) fine = Math.floor(fine / 2);

        // ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏à‡∏£‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        const thiefMoney = Number(thief.money || 0);
        fine = Math.min(fine, thiefMoney);

        // ‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠ 2% ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏µ
        const victimComp   = Math.floor(fine * 0.02);
        const vaultPortion = Math.max(0, fine - victimComp);

        await db.query(
          `UPDATE users
           SET money = GREATEST(money - $1, 0), last_steal = $3
           WHERE user_id = $2`,
          [fine, thiefId, now]
        );
        if (victimComp > 0) {
          await db.query(
            `UPDATE users SET money = money + $1 WHERE user_id = $2`,
            [victimComp, targetId]
          );
        }

        result = { type: 'fail', fine, victimComp, vaultPortion, bootsApplied: !!boots };
      }

      await db.query('COMMIT');
    } catch (e) {
      await db.query('ROLLBACK');
      console.error('steal error:', e);
      return interaction.reply({ content: '‚ö†Ô∏è Something went wrong. Please try again.', flags: MessageFlags.Ephemeral });
    }

    // ‡∏ù‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ï (‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á non-critical) ‚Äî ‡∏™‡πà‡∏á db ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    if (result?.type === 'fail' && result.vaultPortion > 0) {
      try { await depositTax(result.vaultPortion, db); } catch {}
    }

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (result?.type === 'success') {
      const embed = new EmbedBuilder()
        .setTitle('üïµÔ∏è Success!')
        .setColor(COLORS.GREEN)
        .setDescription(
          `You successfully stole **${fmt(result.taken)}** coins from **${targetUser.username}**.`
        )
        .setTimestamp();
      return interaction.reply({ embeds: [embed] });
    } else {
      const parts = [
        `You were caught trying to steal from **${targetUser.username}**.`,
        `üí∏ Fine: **${fmt(result.fine)}** coins.`,
        result.victimComp > 0
          ? `ü§ù Compensation to victim: **${fmt(result.victimComp)}** coins.`
          : `ü§ù No compensation to the victim.`,
        result.bootsApplied ? 'ü•æ Silent Boots reduced your fine by 50%.' : '',
      ].filter(Boolean);

      const embed = new EmbedBuilder()
        .setTitle('üö® Failed!')
        .setColor(COLORS.RED)
        .setDescription(parts.join('\n'))
        .setTimestamp();
      return interaction.reply({ embeds: [embed] });
    }
  },
};
