// commands/sendmoney.js
// Send Money (atomic, BIGINT-safe, bank-cap aware)
// Description (EN): Transfer coins to another user with a fixed-point tax, using a single DB transaction.
// - Uses BigInt for all arithmetic to avoid float errors
// - Fixed tax rate (floor), configurable via TAX_NUM/TAX_DEN
// - Honors recipient bank capacity (recomputes gross so the *net* fits the bank)
// - Fully atomic with SELECT ... FOR UPDATE to prevent race conditions
//
// #‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥/‡∏Å‡∏î‡πÅ‡∏Ç‡πà‡∏á‡∏Å‡∏±‡∏ô
// #‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ BigInt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏ö‡∏ö float ‡∏Ç‡∏≠‡∏á JS

const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const { initUser } = require('../utils/initUser');
const { depositTax } = require('../utils/taxUtils');

// --- Fixed-point tax (e.g., 0.00132 = 132 / 100000) ---
const TAX_NUM = 132n;      // numerator
const TAX_DEN = 100000n;   // denominator

// ---------- helpers ----------
const toBigIntSafe = (v, def = 0n) => {
  if (v === null || v === undefined) return def;
  try { return BigInt(v); } catch { return def; }
};
const ceilDiv = (a, b) => (a + b - 1n) / b; // ‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (BigInt)
const fmt = (n) => new Intl.NumberFormat().format(Number(n)); // ‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏ö‡∏ö‡∏õ‡∏±‡∏î‡∏•‡∏á: floor(gross * rate)
const computeTax = (gross) => (gross * TAX_NUM) / TAX_DEN;

// ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ "net ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ" = desiredNet ‚Üí ‡∏´‡∏≤ gross ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
const grossFromNet = (desiredNet) => {
  const keepDen = TAX_DEN - TAX_NUM; // ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ
  return ceilDiv(desiredNet * TAX_DEN, keepDen);
};

module.exports = {
  name: 'sendmoney',
  description: 'Send coins to another user',
  data: new SlashCommandBuilder()
    .setName('sendmoney')
    .setDescription('Transfer coins to another user')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('Recipient')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('amount')
        .setDescription('Amount to send (or `all`)')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('from')
        .setDescription('Source wallet')
        .addChoices(
          { name: 'Money', value: 'money' },
          { name: 'Bank',  value: 'bank'  },
        ))
    .addStringOption(option =>
      option.setName('to')
        .setDescription('Destination wallet')
        .addChoices(
          { name: 'Money', value: 'money' },
          { name: 'Bank',  value: 'bank'  },
        )),

  // execute(interaction, db) ‚Äî ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°
  async execute(interaction, db) {
    try {
      const senderUser = interaction.user;
      const senderId   = senderUser.id;
      const recipient  = interaction.options.getUser('user');
      const rawAmount  = (interaction.options.getString('amount') || '').trim();
      const source     = (interaction.options.getString('from') || 'money').toLowerCase();
      const dest       = (interaction.options.getString('to')   || 'money').toLowerCase();

      // --- validation ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ---
      if (!recipient || recipient.bot) {
        return interaction.reply({ content: 'ü§ñ You cannot send money to a bot.', flags: MessageFlags.Ephemeral });
      }
      if (recipient.id === senderId) {
        return interaction.reply({ content: '‚ùå You cannot send money to yourself.', flags: MessageFlags.Ephemeral });
      }
      if (!['money', 'bank'].includes(source) || !['money', 'bank'].includes(dest)) {
        return interaction.reply({ content: '‚ö†Ô∏è Invalid source/destination. Choose `money` or `bank`.', flags: MessageFlags.Ephemeral });
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á row ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ô‡∏≠‡∏Å‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô upsert ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
      await initUser(senderUser);
      await initUser(recipient);

      // --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å ---
      await db.query('BEGIN');

      // ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö SELECT ... FOR UPDATE (‡πÄ‡∏£‡∏µ‡∏¢‡∏á id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô deadlock)
      const firstId  = senderId < recipient.id ? senderId : recipient.id;
      const secondId = senderId < recipient.id ? recipient.id : senderId;

      const { rows: r1 } = await db.query(
        `SELECT user_id, username, money, bank, bank_limit FROM users WHERE user_id = $1 FOR UPDATE`,
        [firstId]
      );
      const { rows: r2 } = await db.query(
        `SELECT user_id, username, money, bank, bank_limit FROM users WHERE user_id = $1 FOR UPDATE`,
        [secondId]
      );
      const rowA = r1[0], rowB = r2[0];
      const sender   = rowA.user_id === senderId ? rowA : rowB;
      const receiver = rowA.user_id === recipient.id ? rowA : rowB;

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô BigInt
      const senderBalance    = toBigIntSafe(sender[source]);
      const receiverBalance  = toBigIntSafe(receiver[dest]);
      const receiverBank     = toBigIntSafe(receiver.bank);
      const receiverBankCap  = toBigIntSafe(receiver.bank_limit, 200000n);

      // parse amount
      let requested;
      if (rawAmount.toLowerCase() === 'all') {
        requested = senderBalance;
      } else {
        if (!/^\d+$/.test(rawAmount)) {
          await db.query('ROLLBACK');
          return interaction.reply({ content: '‚ö†Ô∏è Enter a whole number or `all`.', flags: MessageFlags.Ephemeral });
        }
        requested = toBigIntSafe(rawAmount);
      }

      if (requested <= 0n) {
        await db.query('ROLLBACK');
        return interaction.reply({ content: '‚ö†Ô∏è Amount must be greater than 0.', flags: MessageFlags.Ephemeral });
      }
      if (senderBalance < requested) {
        await db.query('ROLLBACK');
        return interaction.reply({ content: `üö´ You do not have enough coins in your ${source}.`, flags: MessageFlags.Ephemeral });
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ/‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å gross = requested)
      let gross = requested;               // ‡∏´‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ
      let tax   = computeTax(gross);       // floor
      let net   = gross - tax;             // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ

      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0
      if (net <= 0n) {
        await db.query('ROLLBACK');
        return interaction.reply({ content: '‚ö†Ô∏è Amount is too small after tax. Try a larger amount.', flags: MessageFlags.Ephemeral });
      }

      // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô bank ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏î‡∏≤‡∏ô (‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î availableSpace)
      if (dest === 'bank') {
        const space = receiverBankCap - receiverBank;
        if (space <= 0n) {
          await db.query('ROLLBACK');
          return interaction.reply({ content: `üè¶ ${recipient.username}'s bank is full.`, flags: MessageFlags.Ephemeral });
        }
        if (net > space) {
          // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á net ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö space ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì gross ‡πÉ‡∏´‡∏°‡πà
          net   = space;
          gross = grossFromNet(net);
          tax   = computeTax(gross);
          let recalculatedNet = gross - tax;

          // ‡∏Å‡∏±‡∏ô edge case ‡∏õ‡∏±‡∏î‡∏•‡∏á‡∏à‡∏ô net > space (‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î +1)
          if (recalculatedNet > space) {
            gross -= 1n;
            tax = computeTax(gross);
            recalculatedNet = gross - tax;
          }
          net = recalculatedNet;

          if (net <= 0n) {
            await db.query('ROLLBACK');
            return interaction.reply({ content: '‚ö†Ô∏è After bank-cap adjustment, net would be 0. Try a smaller amount.', flags: MessageFlags.Ephemeral });
          }
          if (senderBalance < gross) {
            await db.query('ROLLBACK');
            return interaction.reply({ content: 'üö´ You cannot cover transfer + tax after bank cap adjustment.', flags: MessageFlags.Ephemeral });
          }
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á)
      const newSenderAmt   = senderBalance - gross;
      const newReceiverAmt = receiverBalance + net;

      await db.query(`UPDATE users SET ${source} = $1 WHERE user_id = $2`, [String(newSenderAmt), senderId]);
      await db.query(`UPDATE users SET ${dest}   = $1 WHERE user_id = $2`, [String(newReceiverAmt), recipient.id]);

      // ‡∏õ‡∏¥‡∏î‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å depositTax (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á nested tx)
      await db.query('COMMIT');

      // ‡∏ù‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤ vault ‡πÅ‡∏¢‡∏Å (non-critical side effect)
      if (tax > 0n) {
        try { await depositTax(Number(tax)); } catch {}
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const embed = new EmbedBuilder()
        .setTitle('‚úÖ Money Sent')
        .setColor(0x22c55e)
        .setDescription(
          `**${sender.username || interaction.user.username}** sent **${fmt(gross)}** coins from **${source}** to **${recipient.username}**‚Äôs **${dest}**.\n` +
          `üí∏ **Tax:** ${fmt(tax)}\n` +
          `üì• **Received:** ${fmt(net)}`
        )
        .setTimestamp();

      return interaction.reply({ embeds: [embed] });

    } catch (err) {
      console.error('sendmoney error:', err);
      try { await db.query('ROLLBACK'); } catch {}
      return interaction.reply({ content: '‚ö†Ô∏è Something went wrong while processing your transfer.', flags: MessageFlags.Ephemeral });
    }
  },
};
