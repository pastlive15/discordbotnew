// commands/inventory.js
// ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ß‡∏ô‡∏ó‡∏≠‡∏£‡∏µ (‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û + ‡∏î‡∏π‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ)
// - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÜ (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏ó‡∏ô 1 ‡∏´‡∏ô‡πâ‡∏≤/1 ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°)
// - ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤ + ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
// - ‡πÄ‡∏û‡∏¥‡πà‡∏° optional: /inventory user:@someone
// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å (fallback ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô üß© <key>)
// - ‡πÉ‡∏ä‡πâ ephemeral ‡∏î‡πâ‡∏ß‡∏¢ MessageFlags ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°

const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
  MessageFlags,
} = require('discord.js');
const { initUser } = require('../utils/initUser');

// ‡∏™‡∏µ (‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç hex ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏±‡∏ö setColor)
const COLORS = {
  PURPLE: 0x8b5cf6,
  GRAY: 0x94a3b8,
  GREEN: 0x22c55e,
  RED: 0xef4444,
};

const fmt = (n) => new Intl.NumberFormat().format(Number(n || 0));

// ‡πÅ‡∏°‡∏õ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà ‚Äú‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‚Äù (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Embed ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
// #‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
const KNOWN_ITEMS = {
  gloves: {
    name: 'üß§ Gloves',
    describe: () => 'Increase /steal success chance by **+5%** (max 1).',
  },
  boots: {
    name: 'ü•æ Silent Boots',
    describe: () => 'Halves your /steal fine if caught (max 1).',
  },
  key: {
    name: 'üîì Master Key',
    describe: () => 'Doubles your next **vaultrob** reward (consumed).',
  },
};

// ‡πÅ‡∏õ‡∏•‡∏á items JSON ‚Üí array ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ï‡∏±‡∏î 0 ‡∏≠‡∏≠‡∏Å) + ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
function materializeInventory(itemsJson) {
  const items = itemsJson || {};
  const rows = [];
  for (const [key, rawQty] of Object.entries(items)) {
    const qty = Number(rawQty || 0);
    if (qty <= 0) continue;

    const known = KNOWN_ITEMS[key];
    if (known) {
      rows.push({
        key,
        name: known.name,
        qty,
        description: known.describe(),
        order: 0, // #Comment: ‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      });
    } else {
      // fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏°‡∏õ
      rows.push({
        key,
        name: `üß© ${key}`,
        qty,
        description: 'Unrecognized item (added by an update or event).',
        order: 1, // #Comment: ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
      });
    }
  }
  return rows;
}

// ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤: ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏∞ N ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
function chunk(arr, size) {
  const out = [];
  for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));
  return out;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function buildPageEmbed(username, pageItems, pageIdx, pageTotal, totals) {
  const embed = new EmbedBuilder()
    .setTitle(`üéí ${username}'s Inventory`)
    .setColor(COLORS.PURPLE)
    .setDescription(
      pageItems
        .map((it) => `**${it.name}** √ó **${fmt(it.qty)}**\n${it.description}`)
        .join('\n\n')
    )
    .setFooter({
      text: `Items: ${fmt(totals.count)} ‚Ä¢ Distinct: ${fmt(
        totals.distinct
      )} ‚Ä¢ Page ${pageIdx + 1}/${pageTotal}`,
    })
    .setTimestamp();
  return embed;
}

// ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
function buildRowControls(disabled = false) {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('inv_prev')
      .setEmoji('‚óÄ')
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(disabled),
    new ButtonBuilder()
      .setCustomId('inv_next')
      .setEmoji('‚ñ∂')
      .setStyle(ButtonStyle.Secondary)
      .setDisabled(disabled),
    new ButtonBuilder()
      .setCustomId('inv_close')
      .setLabel('Close')
      .setStyle(ButtonStyle.Danger)
      .setDisabled(disabled)
  );
}

module.exports = {
  name: 'inventory',
  description: 'Check your or another user‚Äôs usable item inventory',
  data: new SlashCommandBuilder()
    .setName('inventory')
    .setDescription('View a usable item inventory')
    .addUserOption((o) =>
      o
        .setName('user')
        .setDescription('User to view (defaults to you)')
        .setRequired(false)
    ),

  async execute(interaction) {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const target = interaction.options.getUser('user') || interaction.user;

    // ‡πÇ‡∏´‡∏•‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Å‡∏±‡∏ô null)
    const user = await initUser(target);
    if (!user) {
      return interaction.reply({
        content:
          target.id === interaction.user.id
            ? '‚ùå You need a profile to view your inventory.'
            : `‚ùå ${target.username} does not have a profile yet.`,
        flags: MessageFlags.Ephemeral,
      });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á items ‚Üí array ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ
    const inv = materializeInventory(user.items);

    if (inv.length === 0) {
      return interaction.reply({
        content:
          target.id === interaction.user.id
            ? 'üì¶ Your inventory is empty.'
            : `üì¶ ${target.username}'s inventory is empty.`,
        flags: MessageFlags.Ephemeral,
      });
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á: ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    inv.sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î
    const totals = {
      count: inv.reduce((a, b) => a + b.qty, 0),
      distinct: inv.length,
    };

    // ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤: 6 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏´‡∏ô‡πâ‡∏≤
    const pages = chunk(inv, 6);
    let page = 0;

    const embed = buildPageEmbed(target.username, pages[page], page, pages.length, totals);
    const row = buildRowControls(pages.length <= 1);

    const msg = await interaction.reply({
      embeds: [embed],
      components: pages.length > 1 ? [row] : [],
      flags: MessageFlags.Ephemeral,
    });

    if (pages.length <= 1) return; // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á collector

    // ‡πÄ‡∏Å‡πá‡∏ö event ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á interaction + ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ
    const collector = msg.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: 60_000,
      filter: (btn) =>
        btn.user.id === interaction.user.id && btn.message.id === msg.id,
    });

    collector.on('collect', async (btn) => {
      try {
        await btn.deferUpdate();
      } catch {
        return;
      }

      if (btn.customId === 'inv_close') {
        collector.stop('closed');
        return;
      }

      if (btn.customId === 'inv_prev') {
        page = (page - 1 + pages.length) % pages.length; // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
      } else if (btn.customId === 'inv_next') {
        page = (page + 1) % pages.length; // ‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤
      }

      const newEmbed = buildPageEmbed(
        target.username,
        pages[page],
        page,
        pages.length,
        totals
      );
      try {
        await interaction.editReply({ embeds: [newEmbed], components: [row] });
      } catch {}
    });

    collector.on('end', async () => {
      try {
        await interaction.editReply({ components: [buildRowControls(true)] });
      } catch {}
    });
  },
};
