// commands/shop.js
// ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏™‡∏ß‡∏¢ + ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
// ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ / ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î: ‡πÄ‡∏£‡∏¥‡πà‡∏° 200,000; ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 50,000; ‡∏£‡∏≤‡∏Ñ‡∏≤ = 75,000 * 1.15^tier (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
// - ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å (‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race conditions
// - ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏á‡∏≤‡∏ô = 500 * job_level ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å)
// - ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÇ‡∏à‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î/‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô JSONB ‡∏û‡∏£‡πâ‡∏≠‡∏° guard
// - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° (ephemeral) ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
  MessageFlags,
} = require('discord.js');
const { initUser } = require('../utils/initUser');

const COLORS = {
  AQUA: 0x00bcd4,
  GREEN: 0x22c55e,
  RED: 0xef4444,
  GOLD: 0xf59e0b,
  GRAY: 0x94a3b8,
};

// ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
const BANK_BASE = 200_000;      // ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const BANK_STEP = 50_000;       // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 50k
const BANK_BASE_PRICE = 75_000; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
const BANK_GROWTH = 1.15;       // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏ï 15% ‡∏ï‡πà‡∏≠‡∏Ç‡∏±‡πâ‡∏ô
const BANK_HARD_CAP = 2_000_000;// ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

// ---------- helper (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì tier/‡∏£‡∏≤‡∏Ñ‡∏≤/format) ----------
function bankTier(limit) {
  return Math.max(0, Math.floor((Number(limit || BANK_BASE) - BANK_BASE) / BANK_STEP));
}
function bankUpgradePrice(limit) {
  const tier = bankTier(limit);
  return Math.ceil(BANK_BASE_PRICE * Math.pow(BANK_GROWTH, tier));
}
function fmt(n) {
  return new Intl.NumberFormat().format(Number(n || 0));
}
function canAfford(user, cost) {
  return Number(user.money || 0) >= Number(cost || 0);
}

// UI: ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
function buildShopEmbed(user) {
  const atCap = Number(user.bank_limit || BANK_BASE) >= BANK_HARD_CAP;
  const nextPrice = atCap ? 0 : bankUpgradePrice(user.bank_limit);
  const nextLimit = atCap ? user.bank_limit : Math.min(user.bank_limit + BANK_STEP, BANK_HARD_CAP);

  const embed = new EmbedBuilder()
    .setTitle('üõí Economy Shop')
    .setColor(COLORS.AQUA)
    .setDescription('Tap a button below to purchase items or upgrades.')
    .addFields(
      {
        name: atCap
          ? 'üè¶ Bank Upgrade ‚Äî MAXED'
          : `üè¶ Bank Upgrade ‚Äî ${fmt(nextPrice)} coins`,
        value: atCap
          ? `Your bank limit is already at the maximum (**${fmt(BANK_HARD_CAP)}**).`
          : `Increase bank limit by **+${fmt(BANK_STEP)}** ‚Üí ${fmt(nextLimit)} (current: ${fmt(user.bank_limit)}).\nPrice scales +15% per tier ‚Ä¢ Max: ${fmt(BANK_HARD_CAP)}.`,
      },
      {
        name: `üìà Job Upgrade ‚Äî ${fmt(500 * (user.job_level || 1))} coins`,
        value: 'Increase your Job Level by +1 to boost work rewards. Cost scales with your current level.',
      },
      { name: 'üß§ Gloves ‚Äî 35,000 coins', value: 'Increase /steal success chance by +5%. (max 1)' },
      { name: 'ü•æ Silent Boots ‚Äî 30,000 coins', value: 'If caught using /steal, your fine is halved. (max 1)' },
      { name: 'üîì Master Key ‚Äî 25,000 coins', value: 'Doubles your next vaultrob reward. (stackable)' },
    )
    .setFooter({
      text: `Balance: ${fmt(user.money)} ‚Ä¢ Wallet | Bank: ${fmt(user.bank)} / ${fmt(user.bank_limit)}`,
      iconURL: 'https://cdn.discordapp.com/emojis/1083251527998363718.webp?size=96&quality=lossless',
    })
    .setTimestamp();

  return embed;
}

// ‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏° (‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
function buildShopRow(user) {
  const atCap = Number(user.bank_limit || BANK_BASE) >= BANK_HARD_CAP;
  const bankPrice = atCap ? Infinity : bankUpgradePrice(user.bank_limit);
  const jobPrice = 500 * (user.job_level || 1);

  const glovesHave = Number(user.items?.gloves || 0);
  const bootsHave  = Number(user.items?.boots  || 0);

  const btnBank = new ButtonBuilder()
    .setCustomId('buy_bank')
    .setLabel(atCap ? 'Bank Upgrade (MAXED)' : `Buy Bank Upgrade (${fmt(bankPrice)})`)
    .setStyle(ButtonStyle.Primary)
    .setDisabled(atCap || !canAfford(user, bankPrice));

  const btnJob = new ButtonBuilder()
    .setCustomId('buy_job')
    .setLabel(`Buy Job Upgrade (${fmt(jobPrice)})`)
    .setStyle(ButtonStyle.Primary)
    .setDisabled(!canAfford(user, jobPrice));

  const btnGloves = new ButtonBuilder()
    .setCustomId('buy_gloves')
    .setLabel('Buy Gloves (35,000)')
    .setStyle(ButtonStyle.Secondary)
    .setDisabled(glovesHave >= 1 || !canAfford(user, 35_000));

  const btnBoots = new ButtonBuilder()
    .setCustomId('buy_boots')
    .setLabel('Buy Boots (30,000)')
    .setStyle(ButtonStyle.Secondary)
    .setDisabled(bootsHave >= 1 || !canAfford(user, 30_000));

  const btnKey = new ButtonBuilder()
    .setCustomId('buy_key')
    .setLabel('Buy Master Key (25,000)')
    .setStyle(ButtonStyle.Secondary)
    .setDisabled(!canAfford(user, 25_000));

  return new ActionRowBuilder().addComponents(btnBank, btnJob, btnGloves, btnBoots, btnKey);
}

// ---------- atomic SQL actions (‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ----------
async function buyBankUpgrade(db, userId) {
  // ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å: ‡∏Ñ‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏û‡∏î‡∏≤‡∏ô/‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô/‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏î‡∏≤‡∏ô ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const { rows } = await db.query(
    `
    WITH u AS (
      SELECT user_id, money, bank_limit
      FROM users
      WHERE user_id = $1
      FOR UPDATE
    ),
    calc AS (
      SELECT
        user_id,
        money,
        bank_limit,
        LEAST($5, bank_limit + $2) AS new_limit,
        CEIL($3 * POWER($4, GREATEST(0, FLOOR((bank_limit - $6) / $2))))::bigint AS price
      FROM u
    ),
    guard AS (
      SELECT *
      FROM calc
      WHERE bank_limit < $5
        AND money >= price
    ),
    upd AS (
      UPDATE users
      SET money = users.money - guard.price,
          bank_limit = guard.new_limit
      FROM guard
      WHERE users.user_id = guard.user_id
      RETURNING users.user_id, users.username, users.money, users.bank, users.bank_limit
    )
    SELECT *, (SELECT price FROM guard) AS charged
    FROM upd;
    `,
    [userId, BANK_STEP, BANK_BASE_PRICE, BANK_GROWTH, BANK_HARD_CAP, BANK_BASE],
  );

  if (rows.length === 0) {
    // ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const snap = await db.query('SELECT money, bank_limit FROM users WHERE user_id = $1', [userId]);
    const u = snap.rows[0] || {};
    if ((u.bank_limit || BANK_BASE) >= BANK_HARD_CAP) {
      return { ok: false, msg: `üè¶ Your bank limit is already at the maximum (**${fmt(BANK_HARD_CAP)}**).` };
    }
    const price = bankUpgradePrice(u.bank_limit);
    if ((u.money || 0) < price) {
      return { ok: false, msg: `üí∏ Not enough coins. You need **${fmt(price)}**.` };
    }
    return { ok: false, msg: '‚ö†Ô∏è Purchase failed. Please try again.' };
  }

  const updated = rows[0];
  const charged = Number(rows[0].charged || 0);
  return {
    ok: true,
    charged,
    user: updated,
    note: `üè¶ Bank limit upgraded to **${fmt(updated.bank_limit)}** (paid **${fmt(charged)}**).`,
  };
}

async function buyJobUpgrade(db, userId) {
  const { rows } = await db.query(
    `
    WITH u AS (
      SELECT user_id, money, job_level
      FROM users
      WHERE user_id = $1
      FOR UPDATE
    ),
    calc AS (
      SELECT user_id, money, job_level, (500 * GREATEST(job_level,1))::bigint AS price
      FROM u
    ),
    guard AS (
      SELECT * FROM calc WHERE money >= price
    ),
    upd AS (
      UPDATE users
      SET money = users.money - guard.price,
          job_level = users.job_level + 1
      FROM guard
      WHERE users.user_id = guard.user_id
      RETURNING users.user_id, users.username, users.money, users.job_level
    )
    SELECT *, (SELECT price FROM guard) AS charged FROM upd;
    `,
    [userId],
  );

  if (rows.length === 0) {
    const snap = await db.query('SELECT money, job_level FROM users WHERE user_id=$1', [userId]);
    const u = snap.rows[0] || { job_level: 1, money: 0 };
    const price = 500 * (u.job_level || 1);
    if (u.money < price) return { ok: false, msg: `üí∏ Not enough coins. You need **${fmt(price)}**.` };
    return { ok: false, msg: '‚ö†Ô∏è Purchase failed. Please try again.' };
  }

  const updated = rows[0];
  const charged = Number(rows[0].charged || 0);
  return {
    ok: true,
    charged,
    user: updated,
    note: `üìà Job level upgraded to **${updated.job_level}** (paid **${fmt(charged)}**).`,
  };
}

async function buyLimitedFlagItem(db, userId, key, price, maxCount = 1) {
  // ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô gloves/boots) ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å
  const { rows } = await db.query(
    `
    WITH u AS (
      SELECT user_id, money, items
      FROM users
      WHERE user_id = $1
      FOR UPDATE
    ),
    calc AS (
      SELECT
        user_id,
        money,
        COALESCE(items, '{}'::jsonb) AS items,
        COALESCE((items->>$2)::int, 0) AS have
      FROM u
    ),
    guard AS (
      SELECT *
      FROM calc
      WHERE have < $4 AND money >= $3
    ),
    upd AS (
      UPDATE users
      SET money = users.money - $3,
          items = jsonb_set(
            COALESCE(users.items,'{}'::jsonb),
            ARRAY[$2],
            TO_JSONB(COALESCE((users.items->>$2)::int,0) + 1),
            true
          )
      FROM guard
      WHERE users.user_id = guard.user_id
      RETURNING users.user_id, users.username, users.money, users.items
    )
    SELECT * FROM upd;
    `,
    [userId, key, price, maxCount],
  );

  if (rows.length === 0) {
    const snap = await db.query('SELECT money, items FROM users WHERE user_id=$1', [userId]);
    const money = Number(snap.rows[0]?.money || 0);
    const have = Number(snap.rows[0]?.items?.[key] || 0);
    if (have >= maxCount) return { ok: false, msg: `‚ùå You already own **${prettyItemName(key)}** (max ${maxCount}).` };
    if (money < price) return { ok: false, msg: `üí∏ Not enough coins. You need **${fmt(price)}**.` };
    return { ok: false, msg: '‚ö†Ô∏è Purchase failed. Please try again.' };
  }
  return { ok: true, note: `‚úÖ Purchased **${prettyItemName(key)}**.` };
}

async function buyStackItem(db, userId, key, price) {
  // ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô master key) ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∞‡∏ï‡∏≠‡∏°‡∏°‡∏¥‡∏Å
  const { rows } = await db.query(
    `
    WITH u AS (
      SELECT user_id, money, items
      FROM users
      WHERE user_id = $1
      FOR UPDATE
    ),
    guard AS (
      SELECT * FROM u WHERE money >= $3
    ),
    upd AS (
      UPDATE users
      SET money = users.money - $3,
          items = jsonb_set(
            COALESCE(users.items,'{}'::jsonb),
            ARRAY[$2],
            TO_JSONB(COALESCE((users.items->>$2)::int, 0) + 1),
            true
          )
      FROM guard
      WHERE users.user_id = guard.user_id
      RETURNING users.user_id, users.username, users.money, users.items
    )
    SELECT * FROM upd;
    `,
    [userId, key, price],
  );

  if (rows.length === 0) {
    const money = Number((await db.query('SELECT money FROM users WHERE user_id=$1', [userId])).rows[0]?.money || 0);
    if (money < price) return { ok: false, msg: `üí∏ Not enough coins. You need **${fmt(price)}**.` };
    return { ok: false, msg: '‚ö†Ô∏è Purchase failed. Please try again.' };
  }
  return { ok: true, note: `üîì You bought a **${prettyItemName(key)}**.` };
}

function prettyItemName(key) {
  switch (key) {
    case 'gloves': return 'Gloves';
    case 'boots':  return 'Silent Boots';
    case 'key':    return 'Master Key';
    default:       return key;
  }
}

// ---------- command ----------
module.exports = {
  name: 'shop',
  description: 'View and purchase items from the shop',
  data: new SlashCommandBuilder().setName('shop').setDescription('Browse and buy items from the shop'),

  async execute(interaction, db) {
    // ‡πÇ‡∏´‡∏•‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    let user = await initUser(interaction.user);
    if (!user) {
      return interaction.reply({ content: '‚ùå You need a profile to use the shop.', flags: MessageFlags.Ephemeral });
    }

    // ‡∏™‡πà‡∏á UI ‡πÅ‡∏£‡∏Å (ephemeral)
    await interaction.reply({
      embeds: [buildShopEmbed(user)],
      components: [buildShopRow(user)],
      flags: MessageFlags.Ephemeral,
    });

    // ‡∏î‡∏∂‡∏á message ‡∏Ç‡∏≠‡∏á reply ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô" (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö ephemeral)
    const msg = await interaction.fetchReply();

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πà‡∏° 60 ‡∏ß‡∏¥ ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const collector = msg.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: 60_000,
      filter: (btn) => btn.user.id === interaction.user.id,
    });

    collector.on('collect', async (btn) => {
      await btn.deferUpdate();

      // ‡∏î‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
      user = await initUser(interaction.user);

      let result;
      switch (btn.customId) {
        case 'buy_bank':
          result = await buyBankUpgrade(db, user.user_id);
          break;
        case 'buy_job':
          result = await buyJobUpgrade(db, user.user_id);
          break;
        case 'buy_gloves':
          result = await buyLimitedFlagItem(db, user.user_id, 'gloves', 35_000, 1);
          break;
        case 'buy_boots':
          result = await buyLimitedFlagItem(db, user.user_id, 'boots', 30_000, 1);
          break;
        case 'buy_key':
          result = await buyStackItem(db, user.user_id, 'key', 25_000);
          break;
        default:
          result = { ok: false, msg: '‚ùå Unknown item.' };
      }

      if (!result.ok) {
        return interaction.followUp({ content: result.msg || '‚ö†Ô∏è Failed.', flags: MessageFlags.Ephemeral });
      }

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
      user = await initUser(interaction.user);
      await interaction.editReply({
        embeds: [buildShopEmbed(user)],
        components: [buildShopRow(user)],
      });

      // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô ‡πÜ
      await interaction.followUp({ content: result.note || '‚úÖ Purchased.', flags: MessageFlags.Ephemeral });
    });

    collector.on('end', async () => {
      try {
        const latest = await initUser(interaction.user);
        await interaction.editReply({
          embeds: [buildShopEmbed(latest)],
          components: [],
          content: '‚è∞ Shop session ended.',
        });
      } catch {}
    });
  },
};
